@using E_Commerce.Business.ViewModels.Customer
@model PaginatedList<CustomerViewModel>

@{
    ViewData["Title"] = "Customers";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3 class="card-title">Customers</h3>
                    <a href="@Url.Action("Register", "Account", new { area = "Authentication" })" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Add New User
                    </a>
                </div>
                <div class="card-body">
                    @if (Model != null && Model.Any())
                    {
                        <div class="table-responsive">
                            <table class="table table-bordered table-striped table-hover">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Customer ID</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Status</th>
                                        <th>Registration Date</th>
                                        <th>Orders Count</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var customer in Model)
                                    {
                                        <tr>
                                            <td>
                                                <small class="text-muted">@customer.Id.Substring(0, 5)</small>
                                            </td>
                                            <td>
                                                <strong>@customer.Email</strong>
                                            </td>
                                            <td class="text-center">
                                                @if (!string.IsNullOrEmpty(customer.Role))
                                                {
                                                    <span class="badge" style="background-color: #6f42c1; color: white;">@customer.Role</span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">No Role</span>
                                                }
                                            </td>
                                            <td class="text-center">
                                                <select class="form-select form-select-sm status-dropdown @(customer.IsActive ? "status-active" : "status-inactive")" 
                                                        data-user-id="@customer.Id" 
                                                        style="width: auto; display: inline-block;">
                                                   
                                                        <option value="Active" selected="@(customer.IsActive ? "selected" : null)">
                                                            Active
                                                        </option>
                                                        <option value="Inactive" selected="@(customer.IsActive ? null : "selected")">
                                                            Inactive
                                                        </option>
                                                        Active

                                                   
                                                </select>
                                            </td>
                                            <td>
                                                @customer.CreateAt.ToString("MMM dd, yyyy")
                                                <br>
                                                <small class="text-muted">@customer.CreateAt.ToString("hh:mm tt")</small>
                                            </td>
                                            <td class="text-center">
                                                <span class="badge bg-dark">@customer.OrdersCount</span>
                                            </td>
                                            <td>
                                                <button type="button" class="btn btn-sm btn-outline-primary">View</button>
                                                <button type="button" class="btn btn-sm btn-outline-danger" onclick="showDeleteConfirm('@customer.Id', '@customer.Email')">
                                                    Delete
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <h4 class="text-muted">No customers found</h4>
                            <p class="text-muted">There are currently no customers in the system.</p>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<nav aria-label="Product pagination" class="mt-4">
    <ul class="pagination justify-content-center">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-all-route-data="@ViewContext.HttpContext.Request.Query.Where(q => q.Key != "page").ToDictionary(q => q.Key, q => q.Value.ToString())" asp-route-page="@(Model.PageIndex - 1)">
                    <i class="fas fa-chevron-left"></i>
                </a>
            </li>
        }

        @{
            var startPage = Math.Max(1, Model.PageIndex - 2);
            var endPage = Math.Min(Model.TotalPages, Model.PageIndex + 2);
        }

        @for (int i = startPage; i <= endPage; i++)
        {
            <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                <a class="page-link" asp-action="Index" asp-all-route-data="@ViewContext.HttpContext.Request.Query.Where(q => q.Key != "page").ToDictionary(q => q.Key, q => q.Value.ToString())" asp-route-page="@i">
                    @i
                </a>
            </li>
        }

        @if (Model.HasNextPage)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-all-route-data="@ViewContext.HttpContext.Request.Query.Where(q => q.Key != "page").ToDictionary(q => q.Key, q => q.Value.ToString())" asp-route-page="@(Model.PageIndex + 1)">
                    <i class="fas fa-chevron-right"></i>
                </a>
            </li>
        }
    </ul>
</nav>

<!-- Bootstrap Delete Confirmation Modal (Top Aligned) -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-scrollable mt-5">
        <div class="modal-content p-2 shadow" style="border-radius: 10px;">
            <div class="modal-header border-0">
                <h5 class="modal-title fw-bold" id="deleteConfirmModalLabel">Confirm Delete</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <p id="deleteMessage">Are you sure you want to delete this user?</p>
            </div>
            <div class="modal-footer border-0 justify-content-center">
                <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" action="@Url.Action("Delete", "User", new { area = "Admin" })" style="display: inline;">
                    <input type="hidden" id="deleteUserId" name="id" value="" />
                    <button type="submit" class="btn btn-danger px-4">Delete</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        /* Status dropdown colors */
        .status-dropdown.status-active {
            background-color: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }
        
        .status-dropdown.status-inactive {
            background-color: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }
        
        .status-dropdown.status-active:focus {
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
            border-color: #28a745;
        }
        
        .status-dropdown.status-inactive:focus {
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
            border-color: #dc3545;
        }
    </style>
    
    <script>
        function showDeleteConfirm(userId, userEmail) {
            document.getElementById('deleteMessage').textContent = `Are you sure you want to delete "${userEmail}"?`;
            document.getElementById('deleteUserId').value = userId;
            const modal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
            modal.show();
        }

        // Handle status dropdown change
        document.addEventListener('DOMContentLoaded', function() {
            const statusDropdowns = document.querySelectorAll('.status-dropdown');
            
            statusDropdowns.forEach(dropdown => {
                dropdown.addEventListener('change', function() {
                    const userId = this.getAttribute('data-user-id');
                    const newStatus = this.value;
                    const originalValue = this.querySelector('option[selected]')?.value || 
                                       (this.value === 'Active' ? 'Inactive' : 'Active');
                    
                    // Update dropdown color immediately for better UX
                    this.classList.remove('status-active', 'status-inactive');
                    this.classList.add(newStatus === 'Active' ? 'status-active' : 'status-inactive');
                    
                    // Disable dropdown during request
                    this.disabled = true;
                    
                    // Send AJAX request to change status
                    fetch('@Url.Action("ChangeStatus", "User", new { area = "Admin" })', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        },
                        body: `id=${encodeURIComponent(userId)}&status=${encodeURIComponent(newStatus)}`
                    })
                    .then(response => {
                        if (response.ok) {
                            // Update the selected attribute
                            this.querySelectorAll('option').forEach(option => {
                                option.removeAttribute('selected');
                            });
                            this.querySelector(`option[value="${newStatus}"]`).setAttribute('selected', 'selected');
                            
                            // Show success message (you can customize this)
                            showNotification('Status updated successfully!', 'success');
                        } else {
                            // Revert dropdown to original value and color
                            this.value = originalValue;
                            this.classList.remove('status-active', 'status-inactive');
                            this.classList.add(originalValue === 'Active' ? 'status-active' : 'status-inactive');
                            showNotification('Failed to update status. Please try again.', 'error');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        // Revert dropdown to original value and color
                        this.value = originalValue;
                        this.classList.remove('status-active', 'status-inactive');
                        this.classList.add(originalValue === 'Active' ? 'status-active' : 'status-inactive');
                        showNotification('An error occurred. Please try again.', 'error');
                    })
                    .finally(() => {
                        // Re-enable dropdown
                        this.disabled = false;
                    });
                });
            });
        });

        // Simple notification function (you can replace with your preferred notification system)
        function showNotification(message, type) {
            const alertClass = type === 'success' ? 'alert-success' : 'alert-danger';
            const alertHtml = `
                <div class="alert ${alertClass} alert-dismissible fade show position-fixed" 
                     style="top: 20px; right: 20px; z-index: 9999; min-width: 300px;">
                    ${message}
                    <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', alertHtml);
            
            // Auto-hide after 3 seconds
            setTimeout(() => {
                const alert = document.querySelector('.alert:last-child');
                if (alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                }
            }, 3000);
        }
    </script>
}