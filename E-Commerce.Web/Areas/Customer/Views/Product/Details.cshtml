@model ProductDetailsViewModel
@{
    ViewData["Title"] = Model.Name;
}


<style>
    .rating-stars {
        display: flex;
        gap: 8px;
        font-size: 2rem;
        cursor: pointer;
    }

    .star-select {
        color: #ddd;
        transition: transform 0.2s ease, color 0.2s ease;
    }

        .star-select:hover,
        .star-select.hovered {
            color: #ffc107; /* gold */
            transform: scale(1.2);
        }

        .star-select.selected {
            color: #ffb400; /* brighter gold */
        }

</style>

<div class="product-details-container">
    <!-- Top Section - Two Columns -->
    <div class="product-main-section">
        <!-- Left Side - Images -->
        <div class="product-images">
            <div class="main-image-container">
                <img id="mainProductImage" src="@Model.MainImageUrl" alt="@Model.Name" class="main-product-image" />
            </div>

            @if (Model.AdditionalImages.Any())
            {
                <div class="image-thumbnails">
                    <!-- Main image thumbnail -->
                    <img src="@Model.MainImageUrl" alt="@Model.Name" class="thumbnail active" onclick="swapMainImage('@Model.MainImageUrl')" />

                    <!-- Additional images thumbnails -->
                    @foreach (var image in Model.AdditionalImages)
                    {
                        <img src="@image.ImageUrl" alt="@image.AltText" class="thumbnail" onclick="swapMainImage('@image.ImageUrl')" />
                    }
                </div>
            }
        </div>

        <!-- Right Side - Product Info -->
        <div class="product-info">
            <h1 class="product-name">@Model.Name</h1>
            <div class="category-name">@Model.CategoryName</div>

            <!-- Description (Collapsible) -->
            <div class="description-section">
                <div class="description-content" id="descriptionContent">
                    <p>@Model.Description</p>
                </div>
                @if (!string.IsNullOrEmpty(Model.Description) && Model.Description.Length > 200)
                {
                    <button class="toggle-description" id="toggleDescription" onclick="toggleDescription()">Show More</button>
                }
            </div>

            <!-- Price Section -->
            <div class="price-section">
                @if (Model.HasDiscount)
                {
                    <div class="price-with-discount">
                        <span class="original-price">$@Model.Price.ToString("F2")</span>
                        <span class="discount-price">$@Model.DiscountPrice?.ToString("F2")</span>
                    </div>
                }
                else
                {
                    <span class="regular-price">$@Model.EffectivePrice.ToString("F2")</span>
                }
            </div>

            <!-- Stock Info -->
            <div class="stock-info">
                <span class="stock-status @(Model.InStock ? "in-stock" : "out-of-stock")">
                    @Model.StockStatusText
                </span>
                @if (Model.IsLowStock)
                {
                    <span class="low-stock-warning">@Model.LowStockWarning</span>
                }
            </div>

            <!-- Rating & Reviews -->
            <div class="rating-section">
                <div class="stars">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <i class="fa@(i <= Model.AverageRating ? "s" : "r") fa-star text-warning"></i>
                    }
                </div>
                <span class="rating-text">@Model.AverageRating.ToString("F1") (@Model.ReviewCount reviews)</span>
            </div>

            <!-- Action Buttons -->
            <div class="action-buttons">
                @if (Model.InStock)
                {
                    <form asp-action="AddToCart" asp-controller="Product" method="post">
                        <input type="hidden" name="productId" value="@Model.Id" />
                        <button type="submit" class="add-to-cart-btn">Add to Cart</button>
                    </form>
                    @* <button class="add-to-cart-btn" asp-action="AddToCard" asp-route-productId="@Model.Id">Add to Cart</button> *@
                }
                else
                {   
                    <button class="notify-btn" onclick="notifyWhenAvailable(@Model.Id)">Notify Me When Available</button>
                }
                @if (User.Identity.IsAuthenticated)
                {
                    @await Html.PartialAsync("_WishlistButtonPartial", Model.Id)
                }
                else
                {
                    <a href="@Url.Action("Login", "Account", new { area = "Authentication" })" class="btn btn-outline-danger btn-sm">
                        <i class="far fa-heart me-1"></i>Wishlist
                    </a>
                }
                <button class="share-btn" onclick="shareProduct()">⤴ Share</button>
            </div>
        </div>
    </div>

    <!-- Bottom Section - Two Columns -->
    <div class="product-details-section">
        <!-- Left Side - Tabbed Content -->
        <div class="tabbed-content">
            <div class="tab-headers">
                <button class="tab-header active" onclick="showTab('details')">Details</button>
                <button class="tab-header" onclick="showTab('reviews')">Reviews</button>
                <button class="tab-header" onclick="showTab('discussion')">Discussion</button>
            </div>

            <!-- Details Tab -->
            <div id="details" class="tab-content active">
                <div class="details-content">
                    <h3>Product Details</h3>
                    <p>@Model.Description</p>
                    <div class="product-specs">
                        <div class="spec-item">
                            <strong>Category:</strong> @Model.CategoryName
                        </div>
                        <div class="spec-item">
                            <strong>Stock:</strong> @Model.StockCount units available
                        </div>
                        <div class="spec-item">
                            <strong>Rating:</strong> @Model.AverageRating.ToString("F1")/5.0 based on @Model.ReviewCount reviews
                        </div>
                    </div>
                </div>
            </div>

            <!-- Reviews Tab -->
            <div id="reviews" class="tab-content">
                @if (User.Identity.IsAuthenticated)
                {
                    <form id="addReviewForm" class="mb-4">
                        <input type="hidden" name="productId" value="@Model.Id" />

                        <div class="mb-3">
                            <label class="form-label fw-bold">Pick Your Rating:</label>
                            <div id="starRating" class="rating-stars">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    <i class="fa fa-star star-select" data-value="@i"></i>
                                }
                            </div>
                            <input type="hidden" name="rating" id="ratingInput" value="5" />
                        </div>

                        <div class="input-group">
                            <input name="comment" type="text" class="form-control newsletter-input" placeholder="Write your review..." required>
                            <button type="submit" class="btn newsletter-btn">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                        </div>

                    </form>
                }
                <div id="reviewsList">
                    @await Html.PartialAsync("_ReviewsListPartial", Model.Reviews)
                </div>
            </div>

            <!-- Discussion Tab -->
            <div id="discussion" class="tab-content">
                <div class="discussion-content">
                    <h3>Product Discussion</h3>
                    <p>Join the conversation about this product. Ask questions, share experiences, and connect with other customers.</p>
                    <div class="discussion-placeholder">
                        <p>Discussion features coming soon...</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Side - Rating Summary -->
        <div class="rating-summary">
            <div id="ratingSummary">
                @await Html.PartialAsync("_RatingSummaryPartial", Model)
            </div>
        </div>
    </div>
</div>

@section Scripts {

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="~/lib/sweetalert2/sweetalert2.min.js"></script>
    <link href="~/lib/sweetalert2/sweetalert2.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/product-details.css" />
    <script src="~/js/product-details.js"></script>
    <script src="~/js/wishlist.js"></script>
    <script src="~/js/notifyMe.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/js/all.min.js"></script>
    <script>
    $(function () {
        // Star rating selection
        $('#starRating .star-select').on('click', function () {
            var val = $(this).data('value');
            $('#ratingInput').val(val);
            $('#starRating .star-select').removeClass('text-warning');
            $('#starRating .star-select').each(function () {
                if ($(this).data('value') <= val) $(this).addClass('text-warning');
            });
        });
        // Submit review via AJAX
        $('#addReviewForm').on('submit', function (e) {
            e.preventDefault();
            var form = $(this);
            $.post('/Customer/Product/AddReview', form.serialize(), function (data) {
                $('#reviewsList').html(data.reviewsHtml);
                $('#ratingSummary').html(data.ratingHtml);
                form[0].reset();
                $('#ratingInput').val(5);
                $('#starRating .star-select').removeClass('text-warning').slice(0, 5).addClass('text-warning');
            });
        });
    });


    document.addEventListener("DOMContentLoaded", function () {
        const stars = document.querySelectorAll("#starRating .star-select");
        const ratingInput = document.getElementById("ratingInput");

        let currentRating = parseInt(ratingInput.value) || 0;

        function updateStars(value) {
            stars.forEach(s => {
                s.classList.toggle("selected", s.getAttribute("data-value") <= value);
            });
        }

        // Initial render
        updateStars(currentRating);

        stars.forEach(star => {
            // Hover preview
            star.addEventListener("mouseenter", () => {
                const value = star.getAttribute("data-value");
                stars.forEach(s => {
                    s.classList.toggle("hovered", s.getAttribute("data-value") <= value);
                });
            });

            star.addEventListener("mouseleave", () => {
                stars.forEach(s => s.classList.remove("hovered"));
            });

            star.addEventListener("click", () => {
                const value = parseInt(star.getAttribute("data-value"));

                if (currentRating === value) {
                    currentRating = 0;
                    ratingInput.value = 0;
                } else {
                    currentRating = value;
                    ratingInput.value = value;
                }

                updateStars(currentRating);
            });
        });
        });



    </script>
}