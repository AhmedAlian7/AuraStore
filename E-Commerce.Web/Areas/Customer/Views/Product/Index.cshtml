@model PaginatedList<ProductViewModel>

@{
    ViewData["Title"] = "Products";
    var isAuthenticated = User.Identity?.IsAuthenticated ?? false;
}

<div class="products-page">
    <!-- Header Section -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h2 class="fw-bold text-dark mb-2">Our Products</h2>
            <p class="text-muted">Discover our amazing collection of products</p>
        </div>
    </div>

    <!-- Filter and Search Section -->
    <div class="card shadow-sm mb-4">
        <div class="card-body">
            <form asp-action="Index" method="get" class="row g-3">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-search"></i></span>
                        <input type="text" class="form-control" name="search" value="@Context.Request.Query["search"]" placeholder="Search products...">
                    </div>
                </div>
                <div class="col-md-3">
                    <select class="form-select" name="category">
                        <option value="">All Categories</option>
                        @foreach (var category in ViewBag.Categories as IEnumerable<SelectListItem> ?? Enumerable.Empty<SelectListItem>())
                        {
                            <option value="@category.Value" selected="@category.Selected">@category.Text</option>
                        }
                    </select>
                </div>
                <div class="col-md-3">
                    <select class="form-select" name="sortBy">
                        <option value="">Sort by</option>
                        <option value="name" selected='@(Context.Request.Query["sortBy"] == "name" ? "selected" : "")'>Name</option>
                        <option value="price_asc" selected='@(Context.Request.Query["sortBy"] == "price_asc" ? "selected" : "")'>Price: Low to High</option>
                        <option value="price_desc" selected='@(Context.Request.Query["sortBy"] == "price_desc" ? "selected" : "")'>Price: High to Low</option>
                        <option value="rating" selected='@(Context.Request.Query["sortBy"] == "rating" ? "selected" : "")'>Rating</option>
                        <option value="newest" selected='@(Context.Request.Query["sortBy"] == "newest" ? "selected" : "")'>Newest</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="fas fa-filter me-2"></i>Filter
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Products Grid -->
    @if (Model.Any())
    {
        <div class="row g-4 mb-4">
            @foreach (var product in Model)
            {
                <div class="col-lg-3 col-md-4 col-sm-6">
                    <div class="card product-card h-100 shadow-sm border-0">
                        <!-- Product Image -->
                        <div class="product-image-container position-relative">
                            <img src="@(!string.IsNullOrEmpty(product.MainImageUrl) ? product.MainImageUrl : "/images/product-default.png")"
                                 class="card-img-top product-image"
                                 alt="@product.Name"
                                 loading="lazy">

                            @if (product.DiscountPrice.HasValue && product.DiscountPrice < product.Price)
                            {
                                var discountPercentage = Math.Round(((product.Price - product.DiscountPrice.Value) / product.Price) * 100);
                                <div class="discount-badge position-absolute top-0 start-0 m-2">
                                    <span class="badge bg-danger">-@discountPercentage%</span>
                                </div>
                            }

                            @if (!product.InStock)
                            {
                                <div class="out-of-stock-overlay position-absolute top-0 start-0 w-100 h-100 d-flex align-items-center justify-content-center">
                                    <span class="badge bg-secondary fs-6">Out of Stock</span>
                                </div>
                            }
                        </div>

                        <!-- Product Details -->
                        <div class="card-body d-flex flex-column">
                            <div class="mb-2">
                                <small class="text-muted">@product.CategoryName</small>
                            </div>

                            <h5 class="card-title text-truncate mb-2" title="@product.Name">
                                <a asp-action="Details" asp-route-id="@product.Id" class="text-decoration-none text-dark">
                                    @product.Name
                                </a>
                            </h5>

                            @if (!string.IsNullOrEmpty(product.Description))
                            {
                                <p class="card-text text-muted small description-text">
                                    @(product.Description.Length > 80 ? product.Description.Substring(0, 80) + "..." : product.Description)
                                </p>
                            }

                            <!-- Rating -->
                            @if (product.ReviewCount > 0)
                            {
                                <div class="rating mb-2">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= Math.Floor(product.AverageRating))
                                        {
                                            <i class="fas fa-star text-warning"></i>
                                        }
                                        else if (i == Math.Ceiling(product.AverageRating) && product.AverageRating % 1 != 0)
                                        {
                                            <i class="fas fa-star-half-alt text-warning"></i>
                                        }
                                        else
                                        {
                                            <i class="far fa-star text-warning"></i>
                                        }
                                    }
                                    <small class="text-muted ms-1">(@product.ReviewCount)</small>
                                </div>
                            }

                            <!-- Price -->
                            <div class="price-section mb-3">
                                @if (product.DiscountPrice.HasValue && product.DiscountPrice < product.Price)
                                {
                                    <div class="d-flex align-items-center">
                                        <span class="h5 text-danger mb-0 me-2">$@product.DiscountPrice.Value.ToString("F2")</span>
                                        <small class="text-muted text-decoration-line-through">$@product.Price.ToString("F2")</small>
                                    </div>
                                }
                                else
                                {
                                    <span class="h5 text-primary mb-0">$@product.Price.ToString("F2")</span>
                                }
                            </div>

                            <!-- Actions -->
                            <div class="mt-auto">
                                @if (isAuthenticated)
                                {
                                    <div class="d-grid gap-2">
                                        @if (product.InStock)
                                        {
                                            <button type="button" class="btn btn-primary add-to-cart-btn" data-product-id="@product.Id">
                                                <i class="fas fa-shopping-cart me-2"></i>Add to Cart
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-secondary" disabled>
                                                <i class="fas fa-times me-2"></i>Out of Stock
                                            </button>
                                        }

                                        <button type="button" class="btn btn-outline-danger btn-sm wishlist-btn" data-product-id="@product.Id">
                                            <i class="far fa-heart me-1"></i>Wishlist
                                        </button>
                                    </div>
                                }
                                else if (!isAuthenticated)
                                {
                                    <div class="d-grid">
                                        <a asp-area="Identity" asp-page="/Account/Login" class="btn btn-outline-primary">
                                            <i class="fas fa-sign-in-alt me-2"></i>Login to Purchase
                                        </a>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        <nav aria-label="Product pagination" class="mt-4">
            <ul class="pagination justify-content-center">
                @if (Model.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-all-route-data="@ViewContext.HttpContext.Request.Query.Where(q => q.Key != "page").ToDictionary(q => q.Key, q => q.Value.ToString())" asp-route-page="@(Model.PageIndex - 1)">
                            <i class="fas fa-chevron-left"></i>
                        </a>
                    </li>
                }

                @{
                    var startPage = Math.Max(1, Model.PageIndex - 2);
                    var endPage = Math.Min(Model.TotalPages, Model.PageIndex + 2);
                }

                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-all-route-data="@ViewContext.HttpContext.Request.Query.Where(q => q.Key != "page").ToDictionary(q => q.Key, q => q.Value.ToString())" asp-route-page="@i">
                            @i
                        </a>
                    </li>
                }

                @if (Model.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-all-route-data="@ViewContext.HttpContext.Request.Query.Where(q => q.Key != "page").ToDictionary(q => q.Key, q => q.Value.ToString())" asp-route-page="@(Model.PageIndex + 1)">
                            <i class="fas fa-chevron-right"></i>
                        </a>
                    </li>
                }
            </ul>
        </nav>
    }
    else
    {
        <!-- Empty State -->
        <div class="text-center py-5">
            <div class="mb-4">
                <i class="fas fa-search fa-5x text-muted"></i>
            </div>
            <h4 class="text-muted">No products found</h4>
            <p class="text-muted">Try adjusting your search criteria or browse all products.</p>
            @if (Context.Request.Query.Any())
            {
                <a asp-action="Index" class="btn btn-primary">View All Products</a>
            }
        </div>
    }
</div>
